// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(Prn221projectContext))]
    partial class Prn221projectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Account__3214EC27C96DC41F");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC277E146503");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.CinemaRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__CinemaRoom__ID");

                    b.ToTable("CinemaRoom", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateOnly?>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnName("Date_End");

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("Date_Start");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK__Event__3214EC276088597E");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Promotion__ID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Role__ID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaRoomId")
                        .HasColumnType("int")
                        .HasColumnName("CinemaRoomID");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Seat__ID");

                    b.HasIndex("CinemaRoomId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.ShowTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvaliableSeats")
                        .HasColumnType("int");

                    b.Property<int>("CinemaRoomID")
                        .HasColumnType("int")
                        .HasColumnName("CinemaRoomID");

                    b.Property<int>("MovieID")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<DateTime>("ShowDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ShowTime__ID");

                    b.HasIndex("CinemaRoomID");

                    b.HasIndex("MovieID");

                    b.ToTable("ShowTime", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("Total_Price");

                    b.HasKey("Id")
                        .HasName("PK__Solved_t__3214EC27A69936BB");

                    b.HasIndex("AccountId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TicketId");

                    b.ToTable("Solved_ticket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovieID")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SeatID")
                        .HasColumnType("int")
                        .HasColumnName("SeatID");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ShowtimeID")
                        .HasColumnType("int")
                        .HasColumnName("ShowtimeID");

                    b.Property<int?>("ShowtimeId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3214EC277FE16B60");

                    b.HasIndex("MovieID");

                    b.HasIndex("SeatID");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowtimeID");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovieID")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int?>("SolvedTicketId")
                        .HasColumnType("int")
                        .HasColumnName("Solved_ticketID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC27A304AC82");

                    b.HasIndex("MovieID");

                    b.HasIndex("SolvedTicketId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.TransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Time")
                        .HasColumnType("date");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC2741B4EC9E");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transaction_history", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC2702EE2C12");

                    b.ToTable("Transaction_type", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.HasOne("BusinessObjects.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Account__RoleID__48CFD27E");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Movie", b =>
                {
                    b.HasOne("BusinessObjects.Account", null)
                        .WithMany("Events")
                        .HasForeignKey("AccountId");

                    b.HasOne("BusinessObjects.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Movie__CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObjects.Seat", b =>
                {
                    b.HasOne("BusinessObjects.CinemaRoom", "CinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("CinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Seat__CinemaRoomID");

                    b.Navigation("CinemaRoom");
                });

            modelBuilder.Entity("BusinessObjects.ShowTime", b =>
                {
                    b.HasOne("BusinessObjects.CinemaRoom", "CinemaRoom")
                        .WithMany("ShowTimes")
                        .HasForeignKey("CinemaRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Showtime__CinemaRoomID");

                    b.HasOne("BusinessObjects.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Showtime__MovieID");

                    b.Navigation("CinemaRoom");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Solved_ti__Accou__4AB81AF0");

                    b.HasOne("BusinessObjects.Promotion", "Promotion")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK__Solved_Ticket__PromotionID");

                    b.HasOne("BusinessObjects.Ticket", "Ticket")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Solved_Ticket__TicketID");

                    b.Navigation("Account");

                    b.Navigation("Promotion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.HasOne("BusinessObjects.Movie", "Movie")
                        .WithMany("Tickets")
                        .HasForeignKey("MovieID")
                        .HasConstraintName("FK__Ticket__MovieID");

                    b.HasOne("BusinessObjects.Seat", null)
                        .WithMany("Tickets")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ticket__TicketID");

                    b.HasOne("BusinessObjects.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("BusinessObjects.ShowTime", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ticket__ShowtimeID");

                    b.HasOne("BusinessObjects.ShowTime", "Showtime")
                        .WithMany()
                        .HasForeignKey("ShowtimeId");

                    b.Navigation("Movie");

                    b.Navigation("Seat");

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.HasOne("BusinessObjects.Movie", "Movie")
                        .WithMany("Transactions")
                        .HasForeignKey("MovieID")
                        .HasConstraintName("FK__Transaction_MovieID");

                    b.HasOne("BusinessObjects.SolvedTicket", "SolvedTicket")
                        .WithMany("Transactions")
                        .HasForeignKey("SolvedTicketId")
                        .HasConstraintName("FK__Transaction__SolvedTicketID");

                    b.HasOne("BusinessObjects.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK__Transaction__TypeID");

                    b.Navigation("Movie");

                    b.Navigation("SolvedTicket");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BusinessObjects.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObjects.Transaction", "Transaction")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__Transacti__Trans__5165187F");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("BusinessObjects.CinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("BusinessObjects.Movie", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Promotion", b =>
                {
                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObjects.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusinessObjects.ShowTime", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("BusinessObjects.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
