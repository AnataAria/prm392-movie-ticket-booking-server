// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(Prn221projectContext))]
    [Migration("20241006164935_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Account__3214EC27C96DC41F");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC277E146503");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateOnly?>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnName("Date_End");

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("Date_Start");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceSponsor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SponsorId")
                        .HasColumnType("int")
                        .HasColumnName("SponsorID");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TicketQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Quantity");

                    b.HasKey("Id")
                        .HasName("PK__Event__3214EC276088597E");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SponsorId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3214EC275B251E3B");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC276E6B0E00");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("Total_Price");

                    b.HasKey("Id")
                        .HasName("PK__Solved_t__3214EC27A69936BB");

                    b.HasIndex("AccountId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TicketId");

                    b.ToTable("Solved_ticket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3214EC277FE16B60");

                    b.HasIndex("EventId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<int?>("SolvedTicketId")
                        .HasColumnType("int")
                        .HasColumnName("Solved_ticketID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC27A304AC82");

                    b.HasIndex("EventId");

                    b.HasIndex("SolvedTicketId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.TransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Time")
                        .HasColumnType("date");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC2741B4EC9E");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transaction_history", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC2702EE2C12");

                    b.ToTable("Transaction_type", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.HasOne("BusinessObjects.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Account__RoleID__48CFD27E");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Event", b =>
                {
                    b.HasOne("BusinessObjects.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Event__CategoryI__49C3F6B7");

                    b.HasOne("BusinessObjects.Account", "Sponsor")
                        .WithMany("Events")
                        .HasForeignKey("SponsorId")
                        .HasConstraintName("FK_Event_SponsorID");

                    b.Navigation("Category");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Solved_ti__Accou__4AB81AF0");

                    b.HasOne("BusinessObjects.Promotion", "Promotion")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK__Solved_ti__Promo__4BAC3F29");

                    b.HasOne("BusinessObjects.Ticket", "Ticket")
                        .WithMany("SolvedTickets")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Solved_ti__Ticke__4CA06362");

                    b.Navigation("Account");

                    b.Navigation("Promotion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.HasOne("BusinessObjects.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Ticket__EventID__4D94879B");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.HasOne("BusinessObjects.Event", "Event")
                        .WithMany("Transactions")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Transacti__Event__4E88ABD4");

                    b.HasOne("BusinessObjects.SolvedTicket", "SolvedTicket")
                        .WithMany("Transactions")
                        .HasForeignKey("SolvedTicketId")
                        .HasConstraintName("FK__Transacti__Solve__4F7CD00D");

                    b.HasOne("BusinessObjects.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK__Transacti__TypeI__5070F446");

                    b.Navigation("Event");

                    b.Navigation("SolvedTicket");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BusinessObjects.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObjects.Transaction", "Transaction")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__Transacti__Trans__5165187F");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BusinessObjects.Event", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Promotion", b =>
                {
                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObjects.SolvedTicket", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Ticket", b =>
                {
                    b.Navigation("SolvedTickets");
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("BusinessObjects.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
